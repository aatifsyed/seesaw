use core::fmt;

use expect_test::{expect, expect_file};
use seesaw::{Trait, TraitSet};

// this is all duplicated because I can't get `cargo release` to include the examples when packaging
// and I don't want users to have to follow symlinks.
#[test]
fn doc() {
    let bindings = yakshaver();
    let seesaw = seesaw("Yakshaver", &bindings);

    let mut bindgen = Vec::new();
    bindings.write(Box::new(&mut bindgen)).unwrap();

    expect_file!["generated/bindgen.rs"].assert_eq(&String::from_utf8(bindgen).unwrap());
    expect_file!["generated/seesaw.rs"].assert_eq(&seesaw);
}

#[test]
fn block1() {
    expect![[r#"
        /* this file is @generated by seesaw 0.1.6 */

        #[allow(unused)]
        pub trait Yakshaver {
            #[doc = " destroy a yakshaver"]
            unsafe extern "C" fn destroy(arg1: *mut yakshaver);
            #[doc = " get number of yaks shaved"]
            unsafe extern "C" fn yaks_shaved(arg1: *const yakshaver) -> ::std::os::raw::c_uint;
            #[doc = " shave some yaks"]
            unsafe extern "C" fn shave(arg1: *mut yakshaver) -> ::std::os::raw::c_int;
        }
    "#]]
    .assert_eq(&seesaw(
        Trait::new("Yakshaver").block("create"),
        yakshaver(),
    ));
}

#[test]
fn allow1() {
    expect![[r#"
        /* this file is @generated by seesaw 0.1.6 */

        #[allow(unused)]
        pub trait Yakshaver {
            #[doc = " create a yakshaver"]
            unsafe extern "C" fn create() -> *mut yakshaver;
        }
    "#]]
    .assert_eq(&seesaw(
        Trait::new("Yakshaver").allow("create"),
        yakshaver(),
    ));
}

fn yakshaver() -> bindgen::Bindings {
    bindgen::builder()
        .header_contents("yakshaver.h", include_str!("yakshaver.h"))
        .generate()
        .unwrap()
}

fn seesaw(traits: impl Into<TraitSet>, bindings: impl fmt::Display) -> String {
    let mut s = String::new();
    seesaw::seesaw(traits, bindings, &mut s).unwrap();
    s
}
